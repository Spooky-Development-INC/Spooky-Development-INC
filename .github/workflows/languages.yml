name: Update Languages SVG

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: languages-svg
  cancel-in-progress: true

env:
  MAX_REPOS: "50"

jobs:
  langs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build languages.svg
        id: build
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_READ_TOKEN }}
          script: |
            const fs = require('fs');
            const org = context.repo.owner;
            const maxRepos = parseInt(process.env.MAX_REPOS || '50', 10);

            const repos = await github.paginate(
              github.rest.repos.listForOrg,
              { org, type: 'all', per_page: 100, sort: 'updated' }
            );
            const selected = repos.slice(0, maxRepos);

            const totals = {};
            for (const r of selected) {
              try {
                const { data } = await github.rest.repos.listLanguages({ owner: r.owner.login, repo: r.name });
                for (const [lang, bytes] of Object.entries(data || {})) {
                  totals[lang] = (totals[lang] || 0) + bytes;
                }
              } catch {}
            }

            const entries = Object.entries(totals).sort((a,b)=>b[1]-a[1]);
            const sum = entries.reduce((a,[,v])=>a+v,0) || 1;
            const top = entries.slice(0,10).map(([lang,bytes])=>({lang,bytes,pct:+(bytes*100/sum).toFixed(1)}));

            const colors = {
              Python:'#3776AB', JavaScript:'#F7DF1E', TypeScript:'#3178C6', HTML:'#E34F26', CSS:'#1572B6',
              Dockerfile:'#2496ED', Shell:'#4EAA25', Bash:'#4EAA25', PowerShell:'#2E74B5', Go:'#00ADD8',
              Rust:'#DEA584', C:'#5555FF', 'C++':'#004482', 'C#':'#239120', Java:'#E11F27', Kotlin:'#A97BFF',
              Swift:'#F05138', PHP:'#777BB4', Ruby:'#CC342D', Scala:'#DC322F', Vue:'#41B883', Svelte:'#FF3E00',
              Dart:'#0175C2', Markdown:'#7A7A7A', 'Jupyter Notebook':'#F37626', Makefile:'#6E6E6E',
              TeX:'#3D6117', Haskell:'#5D4F85', Elixir:'#4B275F', SQL:'#336791', Other:'#9CA3AF'
            };

            const slugs = {
              Python:'python', JavaScript:'javascript', TypeScript:'typescript', HTML:'html5', CSS:'css3',
              Dockerfile:'docker', Shell:'gnubash', Bash:'gnubash', PowerShell:'powershell', Go:'go',
              Rust:'rust', C:'c', 'C++':'cplusplus', 'C#':'csharp', Java:'java', Kotlin:'kotlin',
              Swift:'swift', PHP:'php', Ruby:'ruby', Scala:'scala', Vue:'vuedotjs', Svelte:'svelte',
              Dart:'dart', Markdown:'markdown', 'Jupyter Notebook':'jupyter', Makefile:'gnu',
              TeX:'latex', Haskell:'haskell', Elixir:'elixir', SQL:'postgresql'
            };

            const fetchIcon = async (name) => {
              const slug = slugs[name] || 'codeforces';
              try {
                const res = await fetch(`https://cdn.simpleicons.org/${slug}/ffffff`);
                if (!res.ok) return null;
                let svg = await res.text();
                svg = svg.replace(/<\?xml.*?\?>/g,'').replace(/<!--.*?-->/gs,'').replace(/\s+/g,' ').trim();
                return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;
              } catch { return null; }
            };

            const icons = {};
            await Promise.all(top.map(async t => { icons[t.lang] = await fetchIcon(t.lang); }));

            const esc = s => String(s).replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
            const humanBytes = (n)=>{const u=['B','KB','MB','GB'];let i=0,v=n;while(v>=1024&&i<u.length-1){v/=1024;i++;}return `${v.toFixed(v>=10||i===0?0:1)}${u[i]}`;};

            const width=900,leftPad=28,rightPad=28,topPad=70,bottomPad=30,rowH=48,gap=12,iconSize=28,iconCircle=34;
            const nameX=leftPad+iconCircle+14, barX=nameX+160, barMaxW=width-barX-rightPad-90;
            const height=top.length*(rowH+gap)+topPad+bottomPad;

            let rows='', y=topPad;
            for (const row of top) {
              const color=colors[row.lang]||colors.Other;
              const pct=row.pct.toFixed(1).replace(/\.0$/,'');
              const w=Math.max(4, Math.round(barMaxW*row.pct/100));
              const gradId=`g${row.lang.replace(/[^a-zA-Z0-9]/g,'')}`;

              rows+=`
                <defs>
                  <linearGradient id="${gradId}" x1="0" y1="0" x2="1" y2="0">
                    <stop offset="0" stop-color="${color}" stop-opacity="0.95"/>
                    <stop offset="1" stop-color="${color}" stop-opacity="0.55"/>
                  </linearGradient>
                </defs>
                <g transform="translate(0, ${y})">
                  <rect x="${leftPad-4}" y="0" width="${width-leftPad-rightPad+8}" height="${rowH}" rx="12" fill="#0f1115" stroke="#1f2430"/>
                  <circle cx="${leftPad + iconCircle/2}" cy="${rowH/2}" r="${iconCircle/2}" fill="${color}" />
                  ${icons[row.lang] ? `<image href="${icons[row.lang]}" x="${leftPad + (iconCircle - iconSize)/2}" y="${(rowH - iconSize)/2}" width="${iconSize}" height="${iconSize}"/>` : ''}
                  <text x="${nameX}" y="${rowH/2 + 5}" font-size="14" fill="#e5e7eb">${esc(row.lang)}</text>
                  <text x="${barX + w + 10}" y="${rowH/2 + 5}" font-size="12" fill="#cbd5e1">${pct}%</text>
                  <text x="${width - rightPad}" y="${rowH/2 + 5}" font-size="12" fill="#94a3b8" text-anchor="end">${humanBytes(row.bytes)}</text>
                  <rect x="${barX}" y="${rowH/2 - 5}" width="${barMaxW}" height="10" rx="5" fill="#151922"/>
                  <rect x="${barX}" y="${rowH/2 - 5}" width="${w}" height="10" rx="5" fill="url(#${gradId})"/>
                </g>
              `;
              y += rowH + gap;
            }

            const title='Languages usage';
            const subtitle=`Analyzed ${selected.length} repositories â€¢ ${Object.keys(totals).length} languages`;

            const svg = `
              <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
                <style>text{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,Arial,sans-serif}</style>
                <rect width="100%" height="100%" fill="#0b0b0d"/>
                <text x="${leftPad}" y="28" font-size="18" font-weight="700" fill="#f1f5f9">${esc(title)}</text>
                <text x="${leftPad}" y="50" font-size="12" fill="#9aa4b2">${esc(subtitle)}</text>
                ${rows}
              </svg>
            `.trim();

            fs.writeFileSync('languages.svg', svg, 'utf8');

      - name: Commit languages.svg
        id: commit_svg
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update languages.svg"
          file_pattern: languages.svg

      - name: Cache-bust README image
        if: steps.commit_svg.outputs.changes_detected == 'true'
        run: |
          SHA="${{ steps.commit_svg.outputs.commit_hash }}"
          sed -E -i 's#\((\.\/)?languages\.svg(\?[^)]*)?\)#(./languages.svg?v='"$SHA"')#' README.md

      - name: Commit README (cache-bust)
        if: steps.commit_svg.outputs.changes_detected == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: cache-bust languages.svg in README"
          file_pattern: README.md
