name: Update Languages SVG

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: languages-svg
  cancel-in-progress: true

env:
  MAX_REPOS: "50"

jobs:
  langs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build assets/languages.svg
        id: build
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_READ_TOKEN }}
          script: |
            const fs = require('fs');
            const crypto = require('crypto');

            const org = context.repo.owner;
            const maxRepos = parseInt(process.env.MAX_REPOS || '50', 10);

            const repos = await github.paginate(
              github.rest.repos.listForOrg,
              { org, type: 'all', per_page: 100, sort: 'updated' }
            );
            const selected = repos.slice(0, maxRepos);

            const totals = {};
            for (const r of selected) {
              try {
                const { data } = await github.rest.repos.listLanguages({ owner: r.owner.login, repo: r.name });
                for (const [lang, bytes] of Object.entries(data || {})) totals[lang] = (totals[lang] || 0) + bytes;
              } catch {}
            }

            const entries = Object.entries(totals).sort((a,b)=>b[1]-a[1]);
            const sum = entries.reduce((a,[,v])=>a+v,0) || 1;
            const top = entries.slice(0,10).map(([lang,bytes])=>({lang,bytes,pct:+(bytes*100/sum).toFixed(1)}));

            const colors = {Python:'#3776AB',JavaScript:'#F7DF1E',TypeScript:'#3178C6',HTML:'#E34F26',CSS:'#1572B6',Dockerfile:'#2496ED',Shell:'#4EAA25',Bash:'#4EAA25',PowerShell:'#2E74B5',Go:'#00ADD8',Rust:'#DEA584',C:'#5555FF','C++':'#004482','C#':'#239120',Java:'#E11F27',Kotlin:'#A97BFF',Swift:'#F05138',PHP:'#777BB4',Ruby:'#CC342D',Scala:'#DC322F',Vue:'#41B883',Svelte:'#FF3E00',Dart:'#0175C2',Markdown:'#7A7A7A','Jupyter Notebook':'#F37626',Makefile:'#6E6E6E',TeX:'#3D6117',Haskell:'#5D4F85',Elixir:'#4B275F',SQL:'#336791',Other:'#9CA3AF'};
            const slugs = {Python:'python',JavaScript:'javascript',TypeScript:'typescript',HTML:'html5',CSS:'css3',Dockerfile:'docker',Shell:'gnubash',Bash:'gnubash',PowerShell:'powershell',Go:'go',Rust:'rust',C:'c','C++':'cplusplus','C#':'csharp',Java:'java',Kotlin:'kotlin',Swift:'swift',PHP:'php',Ruby:'ruby',Scala:'scala',Vue:'vuedotjs',Svelte:'svelte',Dart:'dart',Markdown:'markdown','Jupyter Notebook':'jupyter',Makefile:'gnu',TeX:'latex',Haskell:'haskell',Elixir:'elixir',SQL:'postgresql'};

            const tryFetch = async (url) => {
              try {
                const res = await fetch(url);
                if (!res.ok) return null;
                let svg = await res.text();
                svg = svg.replace(/<\?xml.*?\?>/g,'').replace(/<!--.*?-->/gs,'').replace(/\s+/g,' ').trim();
                return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;
              } catch { return null; }
            };
            const fetchIcon = async (name) => {
              const slug = slugs[name]; if (!slug) return null;
              return (await tryFetch(`https://cdn.simpleicons.org/${slug}/ffffff`)) ||
                     (await tryFetch(`https://unpkg.com/simple-icons@latest/icons/${slug}.svg`)) ||
                     (await tryFetch(`https://raw.githubusercontent.com/simple-icons/simple-icons/develop/icons/${slug}.svg`));
            };
            const icons = {}; await Promise.all(top.map(async t => { icons[t.lang] = await fetchIcon(t.lang); }));

            const esc = s => String(s).replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
            const human = n => {const u=['B','KB','MB','GB'];let i=0,v=n;while(v>=1024&&i<u.length-1){v/=1024;i++;}return `${v.toFixed(v>=10||i===0?0:1)}${u[i]}`;};
            const acro = n => n==='Jupyter Notebook'?'IPy':n==='Dockerfile'?'Dkr':n==='TypeScript'?'TS':n==='JavaScript'?'JS':n==='PowerShell'?'PS':(n==='C++'||n==='C#')?n:(n.split(/[\s\-]/)[0].slice(0,2).toUpperCase());

            const width=900,left=28,right=28,topPad=70,bottom=30,rowH=52,gap=12,icon=28,circ=36;
            const nameX=left+circ+14, barX=nameX+160, barMax=width-barX-right-120, pctX=width-right-72, bytesX=width-right;
            const height=top.length*(rowH+gap)+topPad+bottom;

            let rows='', y=topPad;
            for (const r of top) {
              const col=colors[r.lang]||colors.Other, pct=r.pct.toFixed(1).replace(/\.0$/,''), w=Math.max(4,Math.round(barMax*r.pct/100)), gid=`g${r.lang.replace(/[^a-zA-Z0-9]/g,'')}`;
              rows+=`
                <defs><linearGradient id="${gid}" x1="0" y1="0" x2="1" y2="0"><stop offset="0" stop-color="${col}" stop-opacity="0.95"/><stop offset="1" stop-color="${col}" stop-opacity="0.55"/></linearGradient></defs>
                <g transform="translate(0, ${y})">
                  <rect x="${left-6}" y="0" width="${width-left-right+12}" height="${rowH}" rx="14" fill="#0f1115" stroke="#1f2430"/>
                  <circle cx="${left + circ/2}" cy="${rowH/2}" r="${circ/2}" fill="${col}"/>
                  ${icons[r.lang] ? `<image href="${icons[r.lang]}" x="${left + (circ - icon)/2}" y="${(rowH - icon)/2}" width="${icon}" height="${icon}"/>`
                                   : `<text x="${left + circ/2}" y="${rowH/2 + 6}" text-anchor="middle" font-size="13" font-weight="700" fill="#0b0b0d">${esc(acro(r.lang))}</text>`}
                  <text x="${nameX}" y="${rowH/2 + 6}" font-size="14" fill="#e5e7eb">${esc(r.lang)}</text>
                  <rect x="${barX}" y="${rowH/2 - 6}" width="${barMax}" height="12" rx="6" fill="#151922"/>
                  <rect x="${barX}" y="${rowH/2 - 6}" width="${w}" height="12" rx="6" fill="url(#${gid})"/>
                  <text x="${pctX}" y="${rowH/2 + 6}" font-size="12" fill="#cbd5e1" text-anchor="end">${pct}%</text>
                  <text x="${bytesX}" y="${rowH/2 + 6}" font-size="12" fill="#94a3b8" text-anchor="end">${human(r.bytes)}</text>
                </g>`;
              y += rowH + gap;
            }

            const title='Languages usage';
            const subtitle=`Analyzed ${selected.length} repositories â€¢ ${Object.keys(totals).length} languages`;

            const svg = `
              <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
                <style>text{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,Arial,sans-serif}</style>
                <rect width="100%" height="100%" fill="#0b0b0d"/>
                <text x="${left}" y="28" font-size="18" font-weight="700" fill="#f1f5f9">${title}</text>
                <text x="${left}" y="50" font-size="12" fill="#9aa4b2">${subtitle}</text>
                ${rows}
              </svg>
            `.trim();

            fs.mkdirSync('assets', { recursive: true });
            fs.writeFileSync('assets/languages.svg', svg, 'utf8');
            const hash = crypto.createHash('sha256').update(svg).digest('hex').slice(0,10);
            core.setOutput('hash', hash);

      - name: Cache-bust README image
        env:
          HASH: ${{ steps.build.outputs.hash }}
        run: |
          if grep -Eq '!\[Languages Usage\]\(\./assets/languages\.svg(\?[^)]*)?\)' README.md; then
            sed -E -i 's#!\[Languages Usage\]\(\.\/assets\/languages\.svg(\?[^)]*)?\)#![Languages Usage](./assets/languages.svg?v='"$HASH"')#' README.md
          else
            sed -E -i 's#!\[Languages Usage\]\(\.\/languages\.svg(\?[^)]*)?\)#![Languages Usage](./assets/languages.svg?v='"$HASH"')#' README.md || true
          fi

      - name: Commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(readme): refresh languages card"
          file_pattern: README.md assets/languages.svg
