name: Update Repo Snapshot

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write
  issues: read
  pull-requests: read

concurrency:
  group: repo-snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync with remote
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git pull --rebase origin main

      - name: Build assets/repo-snapshot.svg
        id: build
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const crypto = require('crypto');
            const { owner, repo } = context.repo;

            const esc = s => String(s ?? '').replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
            const first = s => String(s || '').split('\n')[0].trim();
            const safe = s =>
              (/(token|secret|password|key|auth|bearer|cookie|apikey|jwt|refresh)/i.test(first(s))
                ? '(redacted)'
                : first(s).slice(0, 90));

            const info = await github.rest.repos.get({ owner, repo });
            const branch = info.data.default_branch;

            const cRes = await github.rest.repos.listCommits({ owner, repo, sha: branch, per_page: 1 });
            const c0 = cRes.data[0];
            const commit = c0 ? {
              type:'Commit',
              title:safe(c0.commit.message || ''),
              url:c0.html_url,
              by:c0.author?.login || c0.commit.author?.name || 'unknown',
              extra:c0.sha.slice(0,7)
            } : null;

            const iRes = await github.rest.issues.listForRepo({
              owner, repo, state:'all', per_page:30, sort:'updated', direction:'desc'
            });
            const i0 = iRes.data.find(x => !x.pull_request);
            const issue = i0 ? {
              type:'Issue',
              title:first(i0.title || ''),
              url:i0.html_url,
              by:i0.user?.login || 'unknown',
              extra:`#${i0.number} • ${i0.state}`
            } : null;

            const pRes = await github.rest.pulls.list({ owner, repo, state:'all', per_page:30 });
            pRes.data.sort((a,b)=> new Date(b.updated_at) - new Date(a.updated_at));
            const p0 = pRes.data[0];
            const pr = p0 ? {
              type:'Pull Request',
              title:first(p0.title || ''),
              url:p0.html_url,
              by:p0.user?.login || 'unknown',
              extra:`#${p0.number} • ${p0.merged_at ? 'merged' : p0.state}`
            } : null;

            const width=980, pad=24, headerH=52, rowH=78, rows=3, gap=12;
            const height = headerH + rows*rowH + (rows-1)*gap + pad*2;

            const headTitle = `${owner}/${repo} — Latest activity`;

            const labelX = pad + 92;
            const titleX = pad + 230;
            const rightX = width - pad;
            const rowTop = i => pad + headerH + i*(rowH+gap);
            const rowMid = i => rowTop(i) + Math.floor(rowH/2);

            const circ = (y, color) => `<circle cx="${pad+46}" cy="${y}" r="22" fill="${color}"/>`;
            const glyph = (y, t) => `<text x="${pad+46}" y="${y+7}" text-anchor="middle" font-size="16" font-weight="800" fill="#0b0b0d">${t}</text>`;

            const row = (i, color, sym, label, it) => {
              const top = rowTop(i), mid = rowMid(i);
              if (!it) return `
                <g>
                  <rect x="${pad-6}" y="${top}" width="${width-2*(pad-6)}" height="${rowH}" rx="16" fill="#0f1115" stroke="#1f2430"/>
                  ${circ(mid, color)}${glyph(mid, sym)}
                  <text x="${labelX}" y="${mid-12}" font-size="18" font-weight="800" fill="#F8FAFC">${label}</text>
                  <text x="${titleX}" y="${mid+8}" font-size="15" fill="#C8D0DA" font-style="italic">None</text>
                </g>`;
              return `
                <g>
                  <rect x="${pad-6}" y="${top}" width="${width-2*(pad-6)}" height="${rowH}" rx="16" fill="#0f1115" stroke="#1f2430"/>
                  ${circ(mid, color)}${glyph(mid, sym)}
                  <text x="${labelX}" y="${mid-12}" font-size="18" font-weight="800" fill="#F8FAFC">${label}</text>
                  <a href="${esc(it.url)}" target="_blank" rel="noopener">
                    <text x="${titleX}" y="${mid+8}" font-size="16" fill="#E5E7EB">${esc(it.title)}</text>
                  </a>
                  <text x="${rightX}" y="${mid+8}" font-size="13" fill="#B6C2CF" text-anchor="end">
                    ${esc(it.extra || '')}${it.by ? ' • @' + esc(it.by) : ''}
                  </text>
                </g>`;
            };

            const svg = `
              <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
                <style>text{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,Arial,sans-serif}</style>
                <rect width="100%" height="100%" fill="#0b0b0d"/>
                <g>
                  <rect x="${pad-8}" y="${pad-8}" width="${width-2*(pad-8)}" height="${height-2*(pad-8)}" rx="20" fill="#0d0f14" stroke="#1f2430"/>
                  <rect x="${pad-8}" y="${pad-8}" width="${width-2*(pad-8)}" height="${headerH}" rx="20" fill="#10131a"/>
                  <text x="${pad}" y="${pad+26}" font-size="22" font-weight="900" fill="#F3F4F6">${headTitle}</text>
                </g>
                ${row(0,'#ef4444','C','Commit',commit)}
                ${row(1,'#f59e0b','I','Issue',issue)}
                ${row(2,'#3b82f6','PR','Pull Request',pr)}
              </svg>
            `.trim();

            fs.mkdirSync('assets', { recursive: true });
            fs.writeFileSync('assets/repo-snapshot.svg', svg, 'utf8');
            const hash = crypto.createHash('sha256').update(svg).digest('hex').slice(0,10);
            core.setOutput('hash', hash);

      - name: Cache-bust README image
        env:
          HASH: ${{ steps.build.outputs.hash }}
        run: |
          sed -E -i 's#!\[Repo Snapshot\]\(\.\/assets\/repo-snapshot\.svg(\?[^)]*)?\)#![Repo Snapshot](./assets/repo-snapshot.svg?v='"$HASH"')#' README.md

      - name: Commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(readme): refresh repo snapshot (remove all time text)"
          file_pattern: README.md assets/repo-snapshot.svg
