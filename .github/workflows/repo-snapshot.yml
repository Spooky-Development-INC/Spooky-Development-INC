name: Update Repo Snapshot

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write
  issues: read
  pull-requests: read

concurrency:
  group: repo-snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build snapshot card
        id: build
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const crypto = require('crypto');
            const esc = (s) => String(s ?? '').replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
            const one = (s='') => s.split('\n')[0].trim();
            const safeTitle = (s='') => (/(token|secret|password|key|auth|bearer|cookie|apikey|jwt|refresh)/i.test(one(s)) ? '(redacted)' : one(s).slice(0,120));
            const fmt = (iso) => { if(!iso) return 'n/a'; const d=new Date(iso); return d.toISOString().replace('T',' ').replace('Z',' UTC'); };

            const { owner, repo } = context.repo;
            const info = await github.rest.repos.get({ owner, repo });
            const branch = info.data.default_branch;

            const commits = await github.rest.repos.listCommits({ owner, repo, sha: branch, per_page: 1 });
            const c0 = commits.data[0];
            const commit = c0 ? {
              type: 'Commit',
              title: safeTitle(c0.commit.message || ''),
              url: c0.html_url,
              by: c0.author?.login || c0.commit.author?.name || 'unknown',
              date: c0.commit.author?.date || c0.commit.committer?.date || null,
              extra: c0.sha.slice(0,7)
            } : null;

            const issues = await github.rest.issues.listForRepo({ owner, repo, state: 'all', per_page: 30, sort: 'updated', direction: 'desc' });
            const i0 = issues.data.find(x => !x.pull_request);
            const issue = i0 ? {
              type: 'Issue',
              title: i0.title,
              url: i0.html_url,
              by: i0.user?.login || 'unknown',
              date: i0.updated_at,
              extra: `#${i0.number} • ${i0.state}`
            } : null;

            const pulls = await github.rest.pulls.list({ owner, repo, state: 'all', per_page: 30 });
            pulls.data.sort((a,b)=> new Date(b.updated_at) - new Date(a.updated_at));
            const p0 = pulls.data[0];
            const pr = p0 ? {
              type: 'Pull Request',
              title: p0.title,
              url: p0.html_url,
              by: p0.user?.login || 'unknown',
              date: p0.updated_at,
              extra: `#${p0.number} • ${p0.merged_at ? 'merged' : p0.state}`
            } : null;

            const items = [commit, issue, pr].filter(Boolean);
            const newest = items.length ? items.slice().sort((a,b)=> new Date(b.date)-new Date(a.date))[0] : null;

            const width=900, height=230, pad=20;
            const rowY = y => pad + 60 + y*46;
            const labelX = pad + 56;
            const textX = pad + 130;

            const iconCircle = (y, color) => `<circle cx="${pad+28}" cy="${y}" r="20" fill="${color}"/>`;
            const iconGlyph = (y, glyph) => `<text x="${pad+28}" y="${y+5}" text-anchor="middle" font-size="16" font-weight="700" fill="#0b0b0d">${glyph}</text>`;
            const row = (idx, color, glyph, lbl, item) => {
              const y = rowY(idx);
              if (!item) return `
                <g>
                  ${iconCircle(y, color)} ${iconGlyph(y, glyph)}
                  <text x="${labelX}" y="${y+5}" font-size="14" fill="#e5e7eb">${lbl}</text>
                  <text x="${textX}" y="${y+5}" font-size="12" fill="#94a3b8">None</text>
                </g>`;
              return `
                <g>
                  ${iconCircle(y, color)} ${iconGlyph(y, glyph)}
                  <text x="${labelX}" y="${y+5}" font-size="14" fill="#e5e7eb">${lbl}</text>
                  <a href="${esc(item.url)}" target="_blank" rel="noopener">
                    <text x="${textX}" y="${y+5}" font-size="12" fill="#cbd5e1">${esc(item.title)}</text>
                  </a>
                  <text x="${width-pad}" y="${y+5}" font-size="12" fill="#9aa4b2" text-anchor="end">${esc(item.extra || '')} • @${esc(item.by)} • ${fmt(item.date)}</text>
                </g>`;
            };

            const title = `${owner}/${repo} snapshot`;
            const newestLine = newest ? `${newest.type}: ${one(newest.title)} • @${newest.by} • ${fmt(newest.date)}` : 'No recent activity';

            const svg = `
              <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
                <style>text{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,Arial,sans-serif}</style>
                <rect width="100%" height="100%" fill="#0b0b0d"/>
                <text x="${pad}" y="${pad+10}" font-size="18" font-weight="700" fill="#f1f5f9">${title}</text>
                <text x="${pad}" y="${pad+30}" font-size="12" fill="#9aa4b2">${esc(newestLine)}</text>
                <g>
                  ${row(0, '#ef4444', 'C', 'Commit', commit)}
                  ${row(1, '#22c55e', 'I', 'Issue', issue)}
                  ${row(2, '#3b82f6', 'PR', 'Pull Request', pr)}
                </g>
              </svg>
            `.trim();

            const hash = crypto.createHash('sha256').update(svg).digest('hex').slice(0,10);
            const dir = 'assets';
            fs.mkdirSync(dir, { recursive: true });
            const outfile = `${dir}/repo-snapshot-${hash}.svg`;
            fs.writeFileSync(outfile, svg, 'utf8');
            core.setOutput('outfile', outfile);

      - name: Update README link
        run: |
          NEW="${{ steps.build.outputs.outfile }}"
          if grep -Eq '!\[Repo Snapshot\]\(.*/repo-snapshot-.*\.svg\)' README.md; then
            sed -E -i "s#!\[Repo Snapshot\]\(\./?assets/repo-snapshot-[^)]+\.svg\)#![Repo Snapshot](${NEW})#" README.md
          else
            if grep -q '!\[Repo Snapshot\](' README.md; then
              sed -E -i "s#!\[Repo Snapshot\]\([^)]+\)#![Repo Snapshot](${NEW})#" README.md
            else
              printf '\n## Repo Snapshot\n![Repo Snapshot](%s)\n' "$NEW" >> README.md
            fi
          fi

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(readme): refresh repo snapshot"
          file_pattern: README.md assets/repo-snapshot-*.svg
